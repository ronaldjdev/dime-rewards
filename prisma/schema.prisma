// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// generator jsonSchema {
//   provider              = "prisma-json-schema-generator"
//   includeRequiredFields = "true"
// }

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


// Modelo de User
model User {
  id             String  @id @default(uuid())
  name           String
  last_name      String
  identification String?  @unique
  email          String  @unique
  password       String
  address        String?
  city           String?
  phone          String?
  profilePicture String?

  // Relación con Social Network
  socialMedia SocialMedia[]

  // Relación con Cupones
  tickets Ticket[]
  // Relación con Odontólogo
  dentist Dentist?

  // Relación con Clínicas Odontológicas creadas por el user
  clinic       Clinic[]
  createAt     DateTime       @default(now())
  updateAt     DateTime       @updatedAt
  notification Notification[]

  // Relación con Productos creados por el user
  products Product[]

  // Relación con Insignias (Badges)
  badges UserBadge[]
}

// Modelo de Odontólogo
model Dentist {
  id        String @id @default(uuid())
  name      String
  specialty String

  // Relación con User
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique

  // Relación con Clínicas Odontológicas
  clinics  Clinic[]
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

// Modelo de Clínica Odontológica
model Clinic {
  id             String @id @default(uuid())
  name           String
  address        String
  phone          String
  specialty      String
  identification String @unique

  // Relación con User creator de la clínica
  creator   User     @relation(fields: [creatorId], references: [id])
  creatorId String
  Dentist   Dentist? @relation(fields: [dentistId], references: [id])
  dentistId String?
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
}

// Modelo de Cupon
model Ticket {
  id         String   @id @default(uuid())
  code       String
  discount   Float
  expiration DateTime
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  createAt   DateTime @default(now())
  updateAt   DateTime @updatedAt
}

// Modelo de Producto
model Product {
  id          String   @id @default(uuid())
  name        String
  brand       String
  categoryId  String?
  description String
  price       Float
  quantity    Int
  image       String
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt

  // Relación con User creador del producto
  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  // Relación con Category
  category  Category? @relation(fields: [categoryId], references: [id])
}

// Modelo de Categoría
model Category {
  id        String    @id @default(uuid())
  name      String
  products  Product[]
  createAt  DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model SocialMedia {
  id       String   @id @default(uuid())
  name     String
  url      String
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(uuid())
  type      String // Tipo de notificación: "like", "comment", etc.
  content   String // Contenido de la notificación
  read      Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modelo de Insignia (Badge)
model Badge {
  id          String   @id @default(uuid())
  name        String
  description String
  icon        String
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt

  // Relación con UserBadge
  users UserBadge[]
}

// Modelo de relación muchos a muchos entre User y Badge
model UserBadge {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  badge     Badge    @relation(fields: [badgeId], references: [id])
  badgeId   String
  awardedAt DateTime @default(now())

  @@unique([userId, badgeId])
}